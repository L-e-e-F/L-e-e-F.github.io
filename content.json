[{"title":"JAVA基础概念与常识","date":"2021-08-21T07:08:20.000Z","path":"2021/08/21/JAVA基础概念与常识/","text":"Java 语言有哪些特点? 简单易学； 面向对象（封装，继承，多态）； 平台无关性（ Java 虚拟机实现平台无关性）； 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 可靠性； 安全性； 支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）； 编译与解释并存； 🐛 修正（参见： issue#544） ：C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用std::thread和std::async来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread JVM vs JDK vs JREJVMJava 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。 什么是字节码?采用字节码的好处是什么? 在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。 Java 程序从源代码到运行一般有下面 3 步： 我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。 HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。 总结： Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。 JDK 和 JREJDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。 JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。 如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。 为什么说 Java 语言“编译与解释并存”？高级编程语言按照程序的执行方式分为编译型和解释型两种。简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。比如，你想阅读一本英文名著，你可以找一个英文翻译人员帮助你阅读， 有两种选择方式，你可以先等翻译人员将全本的英文名著（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。 Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（\\*.class 文件），这种字节码必须由 Java 解释器来解释执行。因此，我们可以认为 Java 语言编译与解释并存。 Oracle JDK 和 OpenJDK 的对比可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。 对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案： 问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？ 答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。 总结： Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence 。 OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的； Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题； 在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能； Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本； Oracle JDK 使用 BCL/OTN 协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。 🌈 拓展一下： BCL 协议（Oracle Binary Code License Agreement）： 可以使用JDK（支持商用），但是不能进行修改。 OTN 协议（Oracle Technology Network License Agreement）： 11 及之后新发布的JDK用的都是这个协议，可以自己私下用，但是商用需要付费。 相关阅读👍：《Differences Between Oracle JDK and OpenJDK》 Java 和 C++的区别?我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来！ 都是面向对象的语言，都支持封装、继承和多态 Java 不提供指针来直接访问内存，程序内存更加安全 Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。 Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。 C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）。 …… import java 和 javax 有什么区别？刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。 所以，实际上 java 和 javax 没有区别。这都是一个名字。","link":"","tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://example.com/tags/JAVA/"},{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"}]},{"title":"B站指南","date":"2021-08-20T17:00:00.000Z","path":"2021/08/21/B站指南/","text":"一、计算机网络1. 计算机网络微课堂 https://www.bilibili.com/video/BV1c4411d7jb?p=1 讲师：湖科大教书匠 评价：通俗易懂，重点知识十分细致，配合实验，而且有考研408 的难题的讲解，也是非常适合考研党，除了课程内容外还有很多习题讲解视频。因此就业党和考研党都可以食用 2. 王道计算机考研 计算机网络 https://www.bilibili.com/video/BV19E411D78Q?p=1 UP：王道论坛 评价：小姐姐声音非常好听，百听不厌，内容与考研高度贴合，非常适合考研党和声音控 二、数据结构与算法1. 【郝斌】-数据结构入门 https://www.bilibili.com/video/BV11s41167h6?p=1 老师：郝斌 评价：思路是以初学者的思路来思考的，非常适合小白 2. 【C语言描述】《数据结构和算法》（小甲鱼） https://www.bilibili.com/video/BV1jW411K7yg?p=1 我UP：鱼C-小甲鱼 评价：良心 up ，授课风格相比大学教授，语言风趣幽默，不死板，用例子带知识点，容易听得进去，亲和力拉满 3. 尚硅谷 Java 数据结构与 Java 算法（Java数据结构与算法） https://www.bilibili.com/video/BV1E4411H73v?p=1 UP：尚硅谷 讲师：韩顺平 评价：用JAVA语言讲数据结构和算法，韩老师视频内容全，并且每次课都会带着你写代码，把每一个例子都会实现，韩老师口碑也不必多言了 三、操作系统1. [完结] 2020 南京大学 操作系统：设计与实现 (蒋炎岩) https://www.bilibili.com/video/BV1N741177F5?p=1 评价：南大的课质量真的硬，老师讲课时用的课本是 Remzi 的 Operating Systems: Three Easy Pieces ，老师的每一节视频都比较长，一次肝完贼爽，老师把晦涩的东西讲的也非常的通俗易懂，豁然开朗 2. 清华 操作系统原理(向勇、陈渝) https://www.bilibili.com/video/BV1uW411f72n 评价：讲解非常细致，但是稍微需要有一定的基础（毕竟老师平时是给清华大学讲课的）对于我这种考不上清华的人来说，能给我个听清华老师讲课的机会，还有什么可说的呢？ 四、计算机组成原理1. 计算机组成原理（哈工大刘宏伟） https://www.bilibili.com/video/BV1t4411e7LH?p=1 评价：他的课课不仅适合考研人，也非常适合初学者，初学者也听得懂。建议 1.5 倍速食用。 五、编译原理1. 编译原理（哈工大） https://www.bilibili.com/video/BV1zW411t7YE?p=1 评价：PPT 做的非常认真，讲得也很通俗易懂，思路清晰。直观简洁的，全程没有一句废话。 说明上面五块内容很多选用了大学教授的课程视频，因为这几门课原本就是科班生的必修课，加上近来针对新人和应届生的面试逐渐“八股化”，因此很多概念性的课本知识不得不补。 六、编程语言学习以JAVA为例，目前B站上从JAVA基础一路讲到分布式的比较知名的组织有： 尚硅谷 黑马程序员 动力节点 这部分编程语言学习，不建议分块左右横跳，跟着哪套教程学，就一路学到底，因为每个老师授课习惯不同，顺序也略有差异，而且经常用一个例子由浅入深改造讲解，中途换课程容易断档，不过你可以放心，这三家的虽然各有特点，但是都足够给你讲明白！ 七、设计模式1. 尚硅谷设计模式（图解 + 框架源码剖析）https://www.bilibili.com/video/BV1G4411c7N4评价：有图有源码，良心 2. 黑马程序员 Java 设计模式详解https://www.bilibili.com/video/BV1Np4y1z7BU 评价：从设计原则讲起，知其然知其所以然 八、MYSQL1. MySQL基础教程丨mysql数据库实战（sql数据库优化）https://www.bilibili.com/video/BV1xW411u7ax课程来自尚硅谷，有基础有实战。 2. 尚硅谷MySQL数据库高级，mysql优化，数据库优化https://www.bilibili.com/video/BV1KW411u7vy尚硅谷的课程特点就是分好多好多好多P，每一集都好短，集数超多，如果第一天没有被这种设定劝退的话，讲的还是不错的 九、Maven、Git1. 2020最新Maven教程-Maven基础篇之Maven实战入门https://www.bilibili.com/video/BV1dp4y1Q7Hf课程来自动力节点，从是什么，做什么，为什么到怎么用，分步清晰 2. Git与GitHub基础全套完整版教程（快速上手，一套搞定）https://www.bilibili.com/video/BV1pW411A7a5尚硅谷的课程，评价如题，Git和GitHub快速上手一套搞定 十、JAVA并发与JVM1. 【狂神说Java】JUC并发编程最新版通俗易懂 https://www.bilibili.com/video/BV1B7411L7tE2. 尚硅谷JVM全套教程，百万播放，全网巅峰（宋红康详解java虚拟机）https://www.bilibili.com/video/BV1PJ411n7xZ评价：太TM细致了 十一、Redis1. 【狂神说Java】Redis最新超详细版教程通俗易懂https://www.bilibili.com/video/BV1S54y1R7SB2. 【尚硅谷】2021 最新 Redis 6 入门到精通 超详细 教程https://www.bilibili.com/video/BV1Rv41177Af十二、Linux1. 【小白入门 通俗易懂】2021韩顺平 一周学会Linux https://www.bilibili.com/video/BV1Sv411r7vd通俗易懂，从0开始，够肝的话，一周真的可以","link":"","tags":[{"name":"学习","slug":"学习","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0/"},{"name":"B站","slug":"B站","permalink":"http://example.com/tags/B%E7%AB%99/"}]}]